{"ast":null,"code":"import { Tooltip as LeafletTooltip } from 'leaflet';\nimport { withLeaflet } from './context';\nimport DivOverlay from './DivOverlay';\n\nclass Tooltip extends DivOverlay {\n  constructor(...args) {\n    super(...args);\n\n    this.onTooltipOpen = ({\n      tooltip\n    }) => {\n      if (tooltip === this.leafletElement) {\n        this.onOpen();\n      }\n    };\n\n    this.onTooltipClose = ({\n      tooltip\n    }) => {\n      if (tooltip === this.leafletElement) {\n        this.onClose();\n      }\n    };\n  }\n\n  createLeafletElement(props) {\n    return new LeafletTooltip(this.getOptions(props), props.leaflet.popupContainer);\n  }\n\n  componentDidMount() {\n    const popupContainer = this.props.leaflet.popupContainer;\n    if (popupContainer == null) return;\n    popupContainer.on({\n      tooltipopen: this.onTooltipOpen,\n      tooltipclose: this.onTooltipClose\n    });\n    popupContainer.bindTooltip(this.leafletElement);\n  }\n\n  componentWillUnmount() {\n    const popupContainer = this.props.leaflet.popupContainer;\n    if (popupContainer == null) return;\n    popupContainer.off({\n      tooltipopen: this.onTooltipOpen,\n      tooltipclose: this.onTooltipClose\n    });\n\n    if (popupContainer._map != null) {\n      popupContainer.unbindTooltip(this.leafletElement);\n    }\n  }\n\n}\n\nTooltip.defaultProps = {\n  pane: 'tooltipPane'\n};\nexport default withLeaflet(Tooltip);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Tooltip.js"],"names":["Tooltip","LeafletTooltip","withLeaflet","DivOverlay","onTooltipOpen","tooltip","leafletElement","onOpen","onTooltipClose","onClose","createLeafletElement","props","getOptions","leaflet","popupContainer","componentDidMount","on","tooltipopen","tooltipclose","bindTooltip","componentWillUnmount","off","_map","unbindTooltip","defaultProps","pane"],"mappings":"AAEA,SAASA,OAAO,IAAIC,cAApB,QAA0C,SAA1C;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAMA,MAAMH,OAAN,SAAsBG,UAAtB,CAAwD;AAAA;AAAA;;AAAA,SAoCtDC,aApCsD,GAoCtC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAA8C;AAC5D,UAAIA,OAAO,KAAK,KAAKC,cAArB,EAAqC;AACnC,aAAKC,MAAL;AACD;AACF,KAxCqD;;AAAA,SA0CtDC,cA1CsD,GA0CrC,CAAC;AAAEH,MAAAA;AAAF,KAAD,KAA8C;AAC7D,UAAIA,OAAO,KAAK,KAAKC,cAArB,EAAqC;AACnC,aAAKG,OAAL;AACD;AACF,KA9CqD;AAAA;;AAKtDC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,WAAO,IAAIV,cAAJ,CACL,KAAKW,UAAL,CAAgBD,KAAhB,CADK,EAELA,KAAK,CAACE,OAAN,CAAcC,cAFT,CAAP;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAAA,UACVD,cADU,GACS,KAAKH,KAAL,CAAWE,OADpB,CACVC,cADU;AAElB,QAAIA,cAAc,IAAI,IAAtB,EAA4B;AAE5BA,IAAAA,cAAc,CAACE,EAAf,CAAkB;AAChBC,MAAAA,WAAW,EAAE,KAAKb,aADF;AAEhBc,MAAAA,YAAY,EAAE,KAAKV;AAFH,KAAlB;AAIAM,IAAAA,cAAc,CAACK,WAAf,CAA2B,KAAKb,cAAhC;AACD;;AAEDc,EAAAA,oBAAoB,GAAG;AAAA,UACbN,cADa,GACM,KAAKH,KAAL,CAAWE,OADjB,CACbC,cADa;AAErB,QAAIA,cAAc,IAAI,IAAtB,EAA4B;AAE5BA,IAAAA,cAAc,CAACO,GAAf,CAAmB;AACjBJ,MAAAA,WAAW,EAAE,KAAKb,aADD;AAEjBc,MAAAA,YAAY,EAAE,KAAKV;AAFF,KAAnB;;AAIA,QAAIM,cAAc,CAACQ,IAAf,IAAuB,IAA3B,EAAiC;AAC/BR,MAAAA,cAAc,CAACS,aAAf,CAA6B,KAAKjB,cAAlC;AACD;AACF;;AAlCqD;;AAAlDN,O,CACGwB,Y,GAAe;AACpBC,EAAAA,IAAI,EAAE;AADc,C;AAgDxB,eAAevB,WAAW,CAAiBF,OAAjB,CAA1B","sourcesContent":["// @flow\n\nimport { Tooltip as LeafletTooltip } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport DivOverlay from './DivOverlay'\nimport type { DivOverlayProps } from './types'\n\ntype LeafletElement = LeafletTooltip\ntype Props = DivOverlayProps\n\nclass Tooltip extends DivOverlay<LeafletElement, Props> {\n  static defaultProps = {\n    pane: 'tooltipPane',\n  }\n\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletTooltip(\n      this.getOptions(props),\n      props.leaflet.popupContainer,\n    )\n  }\n\n  componentDidMount() {\n    const { popupContainer } = this.props.leaflet\n    if (popupContainer == null) return\n\n    popupContainer.on({\n      tooltipopen: this.onTooltipOpen,\n      tooltipclose: this.onTooltipClose,\n    })\n    popupContainer.bindTooltip(this.leafletElement)\n  }\n\n  componentWillUnmount() {\n    const { popupContainer } = this.props.leaflet\n    if (popupContainer == null) return\n\n    popupContainer.off({\n      tooltipopen: this.onTooltipOpen,\n      tooltipclose: this.onTooltipClose,\n    })\n    if (popupContainer._map != null) {\n      popupContainer.unbindTooltip(this.leafletElement)\n    }\n  }\n\n  onTooltipOpen = ({ tooltip }: { tooltip: LeafletElement }) => {\n    if (tooltip === this.leafletElement) {\n      this.onOpen()\n    }\n  }\n\n  onTooltipClose = ({ tooltip }: { tooltip: LeafletElement }) => {\n    if (tooltip === this.leafletElement) {\n      this.onClose()\n    }\n  }\n}\n\nexport default withLeaflet<Props, Tooltip>(Tooltip)\n"]},"metadata":{},"sourceType":"module"}