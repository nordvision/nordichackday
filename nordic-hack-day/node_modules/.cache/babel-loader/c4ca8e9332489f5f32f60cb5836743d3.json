{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Pane.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// flowlint sketchy-null-string:off\nimport React, { Component } from 'react';\nimport warning from 'warning';\nimport { LeafletProvider, withLeaflet } from './context';\nimport { addClassName, removeClassName } from './utils/updateClassName';\nimport omit from './utils/omit';\nlet idCounter = 0;\n\nconst uniqueId = () => ++idCounter;\n\nconst LEAFLET_PANES = ['tile', 'shadow', 'overlay', 'map', 'marker', 'tooltip', 'popup'];\nconst PANE_RE = /-*pane/gi;\n\nconst isLeafletPane = name => {\n  return LEAFLET_PANES.indexOf(name.replace(PANE_RE, '')) !== -1;\n};\n\nconst paneStyles = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\n\nclass Pane extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: undefined,\n      context: undefined\n    };\n\n    this.setStyle = ({\n      style,\n      className\n    } = this.props) => {\n      const pane = this.getPane(this.state.name);\n\n      if (pane) {\n        if (className) {\n          addClassName(pane, className);\n        }\n\n        if (style) {\n          // Without the cast, Flow throws this error:\n          //   Cannot assign style[key] to pane.style[key] because string\n          //   is incompatible with number.\n          Object.keys(style).forEach(key => {\n            pane.style[key] = style[key];\n          });\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.createPane(this.props);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.state.name) {\n      // Do nothing if this.state.name is undefined due to errors or\n      // an invalid props.name value\n      return;\n    } // If the 'name' prop has changed the current pane is unmounted and a new\n    // pane is created.\n\n\n    if (this.props.name !== prevProps.name) {\n      this.removePane();\n      this.createPane(this.props);\n    } else {\n      // Remove the previous css class name from the pane if it has changed.\n      // setStyle() will take care of adding in the updated className\n      if (prevProps.className && this.props.className !== prevProps.className) {\n        const pane = this.getPane(this.state.name);\n\n        if (pane != null && prevProps.className != null) {\n          removeClassName(pane, prevProps.className);\n        }\n      } // Update the pane's DOM node style and class\n\n\n      this.setStyle(this.props);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removePane();\n  }\n\n  createPane(props) {\n    const map = props.leaflet.map;\n    const name = props.name || \"pane-\".concat(uniqueId());\n\n    if (map != null && map.createPane != null) {\n      const isDefault = isLeafletPane(name);\n      const existing = isDefault || this.getPane(name);\n\n      if (existing == null) {\n        map.createPane(name, this.getParentPane());\n      } else {\n        const message = isDefault ? \"You must use a unique name for a pane that is not a default leaflet pane (\".concat(name, \")\") : \"A pane with this name already exists. (\".concat(name, \")\");\n        warning(false, message);\n      }\n\n      this.setState({\n        name,\n        context: _objectSpread({}, props.leaflet, {\n          pane: name\n        })\n      }, this.setStyle);\n    }\n  }\n\n  removePane() {\n    // Remove the created pane\n    const name = this.state.name;\n\n    if (name != null) {\n      const pane = this.getPane(name);\n      if (pane != null && pane.remove) pane.remove();\n      const map = this.props.leaflet.map;\n\n      if (map != null && map._panes != null) {\n        map._panes = omit(map._panes, name);\n        map._paneRenderers = omit(map._paneRenderers, name);\n      }\n    }\n  }\n\n  getParentPane() {\n    return this.getPane(this.props.pane || this.props.leaflet.pane);\n  }\n\n  getPane(name) {\n    if (name != null && this.props.leaflet.map != null) {\n      return this.props.leaflet.map.getPane(name);\n    }\n  }\n\n  render() {\n    const context = this.state.context;\n    return context ? React.createElement(LeafletProvider, {\n      value: context,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: paneStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.props.children)) : null;\n  }\n\n}\n\nexport default withLeaflet(Pane);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Pane.js"],"names":["React","Component","warning","LeafletProvider","withLeaflet","addClassName","removeClassName","omit","idCounter","uniqueId","LEAFLET_PANES","PANE_RE","isLeafletPane","name","indexOf","replace","paneStyles","position","top","right","bottom","left","Pane","state","undefined","context","setStyle","style","className","props","pane","getPane","Object","keys","forEach","key","componentDidMount","createPane","componentDidUpdate","prevProps","removePane","componentWillUnmount","map","leaflet","isDefault","existing","getParentPane","message","setState","remove","_panes","_paneRenderers","render","children"],"mappings":"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","sourcesContent":["// @flow\n// flowlint sketchy-null-string:off\n\nimport React, { Component, type Node } from 'react'\nimport warning from 'warning'\n\nimport { LeafletProvider, withLeaflet } from './context'\nimport type { LeafletContext } from './types'\nimport { addClassName, removeClassName } from './utils/updateClassName'\nimport omit from './utils/omit'\n\nlet idCounter = 0\nconst uniqueId = () => ++idCounter\n\nconst LEAFLET_PANES = [\n  'tile',\n  'shadow',\n  'overlay',\n  'map',\n  'marker',\n  'tooltip',\n  'popup',\n]\n\nconst PANE_RE = /-*pane/gi\n\nconst isLeafletPane = (name: string): boolean => {\n  return LEAFLET_PANES.indexOf(name.replace(PANE_RE, '')) !== -1\n}\n\nconst paneStyles = {\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n}\n\ntype Props = {\n  children: Node,\n  className?: string,\n  leaflet: LeafletContext,\n  name?: string,\n  pane?: string,\n  style?: Object,\n}\n\ntype State = {\n  name: ?string,\n  context: ?LeafletContext,\n}\n\nclass Pane extends Component<Props, State> {\n  state = {\n    name: undefined,\n    context: undefined,\n  }\n\n  componentDidMount() {\n    this.createPane(this.props)\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.state.name) {\n      // Do nothing if this.state.name is undefined due to errors or\n      // an invalid props.name value\n      return\n    }\n\n    // If the 'name' prop has changed the current pane is unmounted and a new\n    // pane is created.\n    if (this.props.name !== prevProps.name) {\n      this.removePane()\n      this.createPane(this.props)\n    } else {\n      // Remove the previous css class name from the pane if it has changed.\n      // setStyle() will take care of adding in the updated className\n      if (prevProps.className && this.props.className !== prevProps.className) {\n        const pane = this.getPane(this.state.name)\n        if (pane != null && prevProps.className != null) {\n          removeClassName(pane, prevProps.className)\n        }\n      }\n\n      // Update the pane's DOM node style and class\n      this.setStyle(this.props)\n    }\n  }\n\n  componentWillUnmount() {\n    this.removePane()\n  }\n\n  createPane(props: Props) {\n    const { map } = props.leaflet\n    const name = props.name || `pane-${uniqueId()}`\n\n    if (map != null && map.createPane != null) {\n      const isDefault = isLeafletPane(name)\n      const existing = isDefault || this.getPane(name)\n\n      if (existing == null) {\n        map.createPane(name, this.getParentPane())\n      } else {\n        const message = isDefault\n          ? `You must use a unique name for a pane that is not a default leaflet pane (${name})`\n          : `A pane with this name already exists. (${name})`\n        warning(false, message)\n      }\n\n      this.setState(\n        { name, context: { ...props.leaflet, pane: name } },\n        this.setStyle,\n      )\n    }\n  }\n\n  removePane() {\n    // Remove the created pane\n    const { name } = this.state\n    if (name != null) {\n      const pane = this.getPane(name)\n      if (pane != null && pane.remove) pane.remove()\n\n      const { map } = this.props.leaflet\n      if (map != null && map._panes != null) {\n        map._panes = omit(map._panes, name)\n        map._paneRenderers = omit(map._paneRenderers, name)\n      }\n    }\n  }\n\n  setStyle = ({ style, className }: Props = this.props) => {\n    const pane = this.getPane(this.state.name)\n    if (pane) {\n      if (className) {\n        addClassName(pane, className)\n      }\n      if (style) {\n        // Without the cast, Flow throws this error:\n        //   Cannot assign style[key] to pane.style[key] because string\n        //   is incompatible with number.\n        Object.keys(style).forEach((key: any) => {\n          pane.style[key] = style[key]\n        })\n      }\n    }\n  }\n\n  getParentPane(): ?HTMLElement {\n    return this.getPane(this.props.pane || this.props.leaflet.pane)\n  }\n\n  getPane(name: ?string): ?HTMLElement {\n    if (name != null && this.props.leaflet.map != null) {\n      return this.props.leaflet.map.getPane(name)\n    }\n  }\n\n  render() {\n    const { context } = this.state\n    return context ? (\n      <LeafletProvider value={context}>\n        <div style={paneStyles}>{this.props.children}</div>\n      </LeafletProvider>\n    ) : null\n  }\n}\n\nexport default withLeaflet<Props, Pane>(Pane)\n"]},"metadata":{},"sourceType":"module"}