{"ast":null,"code":"import { Layer, SVGOverlay as LeafletSVGOverlay } from 'leaflet';\nimport { createPortal } from 'react-dom';\nimport { withLeaflet } from './context';\nimport MapComponent from './MapComponent';\n\nclass SVGOverlay extends MapComponent {\n  constructor(props) {\n    super(props);\n    this.leafletElement = this.createLeafletElement(props);\n  }\n\n  get layerContainer() {\n    return this.props.leaflet.layerContainer || this.props.leaflet.map;\n  }\n\n  createLeafletElement(props) {\n    this.container = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    return new LeafletSVGOverlay(this.container, props.bounds, this.getOptions(props));\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (toProps.bounds !== fromProps.bounds) {\n      this.leafletElement.setBounds(toProps.bounds);\n    }\n\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity);\n    }\n\n    if (toProps.zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(toProps.zIndex);\n    }\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.layerContainer.addLayer(this.leafletElement);\n  }\n\n  componentDidUpdate(prevProps) {\n    super.componentDidUpdate(prevProps);\n\n    if (this.props.attribution !== prevProps.attribution) {\n      const map = this.props.leaflet.map;\n\n      if (map != null && map.attributionControl != null) {\n        map.attributionControl.removeAttribution(prevProps.attribution);\n        map.attributionControl.addAttribution(this.props.attribution);\n      }\n    }\n\n    this.updateLeafletElement(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n    this.layerContainer.removeLayer(this.leafletElement);\n    this.container = null;\n  }\n\n  render() {\n    const children = this.props.children;\n\n    if (children == null || this.container == null) {\n      return null;\n    }\n\n    return createPortal(children, this.container);\n  }\n\n}\n\nexport default withLeaflet(SVGOverlay);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/SVGOverlay.js"],"names":["Layer","SVGOverlay","LeafletSVGOverlay","createPortal","withLeaflet","MapComponent","constructor","props","leafletElement","createLeafletElement","layerContainer","leaflet","map","container","document","createElementNS","bounds","getOptions","updateLeafletElement","fromProps","toProps","setBounds","opacity","setOpacity","zIndex","setZIndex","componentDidMount","addLayer","componentDidUpdate","prevProps","attribution","attributionControl","removeAttribution","addAttribution","componentWillUnmount","removeLayer","render","children"],"mappings":"AAEA,SAASA,KAAT,EAAgBC,UAAU,IAAIC,iBAA9B,QAAuD,SAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AAGA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAKA,MAAMJ,UAAN,SAAyBI,YAAzB,CAA6D;AAI3DC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AACA,SAAKC,cAAL,GAAsB,KAAKC,oBAAL,CAA0BF,KAA1B,CAAtB;AACD;;AAED,MAAIG,cAAJ,GAA4B;AAC1B,WAAO,KAAKH,KAAL,CAAWI,OAAX,CAAmBD,cAAnB,IAAqC,KAAKH,KAAL,CAAWI,OAAX,CAAmBC,GAA/D;AACD;;AAEDH,EAAAA,oBAAoB,CAACF,KAAD,EAA+B;AACjD,SAAKM,SAAL,GAAiBC,QAAQ,CAACC,eAAT,CACf,4BADe,EAEf,KAFe,CAAjB;AAIA,WAAO,IAAIb,iBAAJ,CACL,KAAKW,SADA,EAELN,KAAK,CAACS,MAFD,EAGL,KAAKC,UAAL,CAAgBV,KAAhB,CAHK,CAAP;AAKD;;AAEDW,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AACrD,QAAIA,OAAO,CAACJ,MAAR,KAAmBG,SAAS,CAACH,MAAjC,EAAyC;AACvC,WAAKR,cAAL,CAAoBa,SAApB,CAA8BD,OAAO,CAACJ,MAAtC;AACD;;AACD,QAAII,OAAO,CAACE,OAAR,KAAoBH,SAAS,CAACG,OAAlC,EAA2C;AACzC,WAAKd,cAAL,CAAoBe,UAApB,CAA+BH,OAAO,CAACE,OAAvC;AACD;;AACD,QAAIF,OAAO,CAACI,MAAR,KAAmBL,SAAS,CAACK,MAAjC,EAAyC;AACvC,WAAKhB,cAAL,CAAoBiB,SAApB,CAA8BL,OAAO,CAACI,MAAtC;AACD;AACF;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,UAAMA,iBAAN;AACA,SAAKhB,cAAL,CAAoBiB,QAApB,CAA6B,KAAKnB,cAAlC;AACD;;AAEDoB,EAAAA,kBAAkB,CAACC,SAAD,EAAmB;AACnC,UAAMD,kBAAN,CAAyBC,SAAzB;;AAEA,QAAI,KAAKtB,KAAL,CAAWuB,WAAX,KAA2BD,SAAS,CAACC,WAAzC,EAAsD;AAAA,YAC5ClB,GAD4C,GACpC,KAAKL,KAAL,CAAWI,OADyB,CAC5CC,GAD4C;;AAEpD,UAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACmB,kBAAJ,IAA0B,IAA7C,EAAmD;AACjDnB,QAAAA,GAAG,CAACmB,kBAAJ,CAAuBC,iBAAvB,CAAyCH,SAAS,CAACC,WAAnD;AACAlB,QAAAA,GAAG,CAACmB,kBAAJ,CAAuBE,cAAvB,CAAsC,KAAK1B,KAAL,CAAWuB,WAAjD;AACD;AACF;;AAED,SAAKZ,oBAAL,CAA0BW,SAA1B,EAAqC,KAAKtB,KAA1C;AACD;;AAED2B,EAAAA,oBAAoB,GAAG;AACrB,UAAMA,oBAAN;AACA,SAAKxB,cAAL,CAAoByB,WAApB,CAAgC,KAAK3B,cAArC;AACA,SAAKK,SAAL,GAAiB,IAAjB;AACD;;AAEDuB,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAK9B,KADnB,CACC8B,QADD;;AAEP,QAAIA,QAAQ,IAAI,IAAZ,IAAoB,KAAKxB,SAAL,IAAkB,IAA1C,EAAgD;AAC9C,aAAO,IAAP;AACD;;AAED,WAAOV,YAAY,CAACkC,QAAD,EAAW,KAAKxB,SAAhB,CAAnB;AACD;;AArE0D;;AAwE7D,eAAeT,WAAW,CAAoBH,UAApB,CAA1B","sourcesContent":["// @flow\n\nimport { Layer, SVGOverlay as LeafletSVGOverlay } from 'leaflet'\nimport { createPortal } from 'react-dom'\n\nimport type { SVGOverlayProps } from './types'\nimport { withLeaflet } from './context'\nimport MapComponent from './MapComponent'\n\ntype LeafletElement = LeafletSVGOverlay\ntype Props = SVGOverlayProps\n\nclass SVGOverlay extends MapComponent<LeafletElement, Props> {\n  leafletElement: LeafletElement\n  container: ?Element\n\n  constructor(props: Props) {\n    super(props)\n    this.leafletElement = this.createLeafletElement(props)\n  }\n\n  get layerContainer(): Layer {\n    return this.props.leaflet.layerContainer || this.props.leaflet.map\n  }\n\n  createLeafletElement(props: Props): LeafletElement {\n    this.container = document.createElementNS(\n      'http://www.w3.org/2000/svg',\n      'svg',\n    )\n    return new LeafletSVGOverlay(\n      this.container,\n      props.bounds,\n      this.getOptions(props),\n    )\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.bounds !== fromProps.bounds) {\n      this.leafletElement.setBounds(toProps.bounds)\n    }\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity)\n    }\n    if (toProps.zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(toProps.zIndex)\n    }\n  }\n\n  componentDidMount() {\n    super.componentDidMount()\n    this.layerContainer.addLayer(this.leafletElement)\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    super.componentDidUpdate(prevProps)\n\n    if (this.props.attribution !== prevProps.attribution) {\n      const { map } = this.props.leaflet\n      if (map != null && map.attributionControl != null) {\n        map.attributionControl.removeAttribution(prevProps.attribution)\n        map.attributionControl.addAttribution(this.props.attribution)\n      }\n    }\n\n    this.updateLeafletElement(prevProps, this.props)\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount()\n    this.layerContainer.removeLayer(this.leafletElement)\n    this.container = null\n  }\n\n  render() {\n    const { children } = this.props\n    if (children == null || this.container == null) {\n      return null\n    }\n\n    return createPortal(children, this.container)\n  }\n}\n\nexport default withLeaflet<Props, SVGOverlay>(SVGOverlay)\n"]},"metadata":{},"sourceType":"module"}