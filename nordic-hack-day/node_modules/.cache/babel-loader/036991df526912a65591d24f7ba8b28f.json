{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Marker.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Marker as LeafletMarker } from 'leaflet';\nimport React from 'react';\nimport { LeafletProvider, withLeaflet } from './context';\nimport MapLayer from './MapLayer';\n\nclass Marker extends MapLayer {\n  createLeafletElement(props) {\n    const el = new LeafletMarker(props.position, this.getOptions(props));\n    this.contextValue = _objectSpread({}, props.leaflet, {\n      popupContainer: el\n    });\n    return el;\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position);\n    }\n\n    if (toProps.icon !== fromProps.icon) {\n      this.leafletElement.setIcon(toProps.icon);\n    }\n\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\n    }\n\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity);\n    }\n\n    if (toProps.draggable !== fromProps.draggable) {\n      if (toProps.draggable === true) {\n        this.leafletElement.dragging.enable();\n      } else {\n        this.leafletElement.dragging.disable();\n      }\n    }\n  }\n\n  render() {\n    const children = this.props.children;\n    return children == null || this.contextValue == null ? null : React.createElement(LeafletProvider, {\n      value: this.contextValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, children);\n  }\n\n}\n\nexport default withLeaflet(Marker);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Marker.js"],"names":["Marker","LeafletMarker","React","LeafletProvider","withLeaflet","MapLayer","createLeafletElement","props","el","position","getOptions","contextValue","leaflet","popupContainer","updateLeafletElement","fromProps","toProps","leafletElement","setLatLng","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","draggable","dragging","enable","disable","render","children"],"mappings":";;;;;;;AAEA,SAAoBA,MAAM,IAAIC,aAA9B,QAAmD,SAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,WAA7C;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAYA,MAAML,MAAN,SAAqBK,QAArB,CAAqD;AACnDC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,UAAMC,EAAE,GAAG,IAAIP,aAAJ,CAAkBM,KAAK,CAACE,QAAxB,EAAkC,KAAKC,UAAL,CAAgBH,KAAhB,CAAlC,CAAX;AACA,SAAKI,YAAL,qBAAyBJ,KAAK,CAACK,OAA/B;AAAwCC,MAAAA,cAAc,EAAEL;AAAxD;AACA,WAAOA,EAAP;AACD;;AAEDM,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AACrD,QAAIA,OAAO,CAACP,QAAR,KAAqBM,SAAS,CAACN,QAAnC,EAA6C;AAC3C,WAAKQ,cAAL,CAAoBC,SAApB,CAA8BF,OAAO,CAACP,QAAtC;AACD;;AACD,QAAIO,OAAO,CAACG,IAAR,KAAiBJ,SAAS,CAACI,IAA/B,EAAqC;AACnC,WAAKF,cAAL,CAAoBG,OAApB,CAA4BJ,OAAO,CAACG,IAApC;AACD;;AACD,QAAIH,OAAO,CAACK,YAAR,KAAyBN,SAAS,CAACM,YAAvC,EAAqD;AACnD,WAAKJ,cAAL,CAAoBK,eAApB,CAAoCN,OAAO,CAACK,YAA5C;AACD;;AACD,QAAIL,OAAO,CAACO,OAAR,KAAoBR,SAAS,CAACQ,OAAlC,EAA2C;AACzC,WAAKN,cAAL,CAAoBO,UAApB,CAA+BR,OAAO,CAACO,OAAvC;AACD;;AACD,QAAIP,OAAO,CAACS,SAAR,KAAsBV,SAAS,CAACU,SAApC,EAA+C;AAC7C,UAAIT,OAAO,CAACS,SAAR,KAAsB,IAA1B,EAAgC;AAC9B,aAAKR,cAAL,CAAoBS,QAApB,CAA6BC,MAA7B;AACD,OAFD,MAEO;AACL,aAAKV,cAAL,CAAoBS,QAApB,CAA6BE,OAA7B;AACD;AACF;AACF;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKvB,KADnB,CACCuB,QADD;AAEP,WAAOA,QAAQ,IAAI,IAAZ,IAAoB,KAAKnB,YAAL,IAAqB,IAAzC,GAAgD,IAAhD,GACL,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE,KAAKA,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4CmB,QAA5C,CADF;AAGD;;AAlCkD;;AAqCrD,eAAe1B,WAAW,CAAgBJ,MAAhB,CAA1B","sourcesContent":["// @flow\n\nimport { type Icon, Marker as LeafletMarker } from 'leaflet'\nimport React from 'react'\n\nimport { LeafletProvider, withLeaflet } from './context'\nimport MapLayer from './MapLayer'\nimport type { LatLng, MapLayerProps } from './types'\n\ntype LeafletElement = LeafletMarker\ntype Props = {\n  icon?: Icon,\n  draggable?: boolean,\n  opacity?: number,\n  position: LatLng,\n  zIndexOffset?: number,\n} & MapLayerProps\n\nclass Marker extends MapLayer<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const el = new LeafletMarker(props.position, this.getOptions(props))\n    this.contextValue = { ...props.leaflet, popupContainer: el }\n    return el\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position)\n    }\n    if (toProps.icon !== fromProps.icon) {\n      this.leafletElement.setIcon(toProps.icon)\n    }\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset)\n    }\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity)\n    }\n    if (toProps.draggable !== fromProps.draggable) {\n      if (toProps.draggable === true) {\n        this.leafletElement.dragging.enable()\n      } else {\n        this.leafletElement.dragging.disable()\n      }\n    }\n  }\n\n  render() {\n    const { children } = this.props\n    return children == null || this.contextValue == null ? null : (\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\n    )\n  }\n}\n\nexport default withLeaflet<Props, Marker>(Marker)\n"]},"metadata":{},"sourceType":"module"}