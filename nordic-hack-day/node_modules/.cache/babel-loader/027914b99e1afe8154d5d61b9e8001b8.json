{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nclass FeatureGroup extends Path {\n  createLeafletElement(props) {\n    const el = new LeafletFeatureGroup(this.getOptions(props));\n    this.contextValue = _objectSpread({}, props.leaflet, {\n      layerContainer: el,\n      popupContainer: el\n    });\n    return el;\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.setStyle(this.props);\n  }\n\n}\n\nexport default withLeaflet(FeatureGroup);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/FeatureGroup.js"],"names":["FeatureGroup","LeafletFeatureGroup","withLeaflet","Path","createLeafletElement","props","el","getOptions","contextValue","leaflet","layerContainer","popupContainer","componentDidMount","setStyle"],"mappings":";;;;;;AAEA,SAASA,YAAY,IAAIC,mBAAzB,QAAoD,SAApD;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAMA,MAAMH,YAAN,SAA2BG,IAA3B,CAAuD;AACrDC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,UAAMC,EAAE,GAAG,IAAIL,mBAAJ,CAAwB,KAAKM,UAAL,CAAgBF,KAAhB,CAAxB,CAAX;AACA,SAAKG,YAAL,qBACKH,KAAK,CAACI,OADX;AAEEC,MAAAA,cAAc,EAAEJ,EAFlB;AAGEK,MAAAA,cAAc,EAAEL;AAHlB;AAKA,WAAOA,EAAP;AACD;;AAEDM,EAAAA,iBAAiB,GAAG;AAClB,UAAMA,iBAAN;AACA,SAAKC,QAAL,CAAc,KAAKR,KAAnB;AACD;;AAdoD;;AAiBvD,eAAeH,WAAW,CAAsBF,YAAtB,CAA1B","sourcesContent":["// @flow\n\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { PathProps } from './types'\n\ntype LeafletElement = LeafletFeatureGroup\ntype Props = PathProps\n\nclass FeatureGroup extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const el = new LeafletFeatureGroup(this.getOptions(props))\n    this.contextValue = {\n      ...props.leaflet,\n      layerContainer: el,\n      popupContainer: el,\n    }\n    return el\n  }\n\n  componentDidMount() {\n    super.componentDidMount()\n    this.setStyle(this.props)\n  }\n}\n\nexport default withLeaflet<Props, FeatureGroup>(FeatureGroup)\n"]},"metadata":{},"sourceType":"module"}