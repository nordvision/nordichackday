{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ImageOverlay as LeafletImageOverlay, latLngBounds } from 'leaflet';\nimport { withLeaflet } from './context';\nimport MapLayer from './MapLayer';\n\nclass ImageOverlay extends MapLayer {\n  createLeafletElement(props) {\n    const el = new LeafletImageOverlay(props.url, props.bounds, this.getOptions(props));\n    this.contextValue = _objectSpread({}, props.leaflet, {\n      popupContainer: el\n    });\n    return el;\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (toProps.url !== fromProps.url) {\n      this.leafletElement.setUrl(toProps.url);\n    }\n\n    if (toProps.bounds !== fromProps.bounds) {\n      this.leafletElement.setBounds(latLngBounds(toProps.bounds));\n    }\n\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity);\n    }\n\n    if (toProps.zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(toProps.zIndex);\n    }\n  }\n\n}\n\nexport default withLeaflet(ImageOverlay);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/ImageOverlay.js"],"names":["ImageOverlay","LeafletImageOverlay","latLngBounds","withLeaflet","MapLayer","createLeafletElement","props","el","url","bounds","getOptions","contextValue","leaflet","popupContainer","updateLeafletElement","fromProps","toProps","leafletElement","setUrl","setBounds","opacity","setOpacity","zIndex","setZIndex"],"mappings":";;;;;;AAEA,SAASA,YAAY,IAAIC,mBAAzB,EAA8CC,YAA9C,QAAkE,SAAlE;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAYA,MAAMJ,YAAN,SAA2BI,QAA3B,CAA2D;AACzDC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,UAAMC,EAAE,GAAG,IAAIN,mBAAJ,CACTK,KAAK,CAACE,GADG,EAETF,KAAK,CAACG,MAFG,EAGT,KAAKC,UAAL,CAAgBJ,KAAhB,CAHS,CAAX;AAKA,SAAKK,YAAL,qBAAyBL,KAAK,CAACM,OAA/B;AAAwCC,MAAAA,cAAc,EAAEN;AAAxD;AACA,WAAOA,EAAP;AACD;;AAEDO,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AACrD,QAAIA,OAAO,CAACR,GAAR,KAAgBO,SAAS,CAACP,GAA9B,EAAmC;AACjC,WAAKS,cAAL,CAAoBC,MAApB,CAA2BF,OAAO,CAACR,GAAnC;AACD;;AACD,QAAIQ,OAAO,CAACP,MAAR,KAAmBM,SAAS,CAACN,MAAjC,EAAyC;AACvC,WAAKQ,cAAL,CAAoBE,SAApB,CAA8BjB,YAAY,CAACc,OAAO,CAACP,MAAT,CAA1C;AACD;;AACD,QAAIO,OAAO,CAACI,OAAR,KAAoBL,SAAS,CAACK,OAAlC,EAA2C;AACzC,WAAKH,cAAL,CAAoBI,UAApB,CAA+BL,OAAO,CAACI,OAAvC;AACD;;AACD,QAAIJ,OAAO,CAACM,MAAR,KAAmBP,SAAS,CAACO,MAAjC,EAAyC;AACvC,WAAKL,cAAL,CAAoBM,SAApB,CAA8BP,OAAO,CAACM,MAAtC;AACD;AACF;;AAxBwD;;AA2B3D,eAAenB,WAAW,CAAsBH,YAAtB,CAA1B","sourcesContent":["// @flow\n\nimport { ImageOverlay as LeafletImageOverlay, latLngBounds } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport MapLayer from './MapLayer'\nimport type { LatLngBounds, MapLayerProps } from './types'\n\ntype LeafletElement = LeafletImageOverlay\ntype Props = {\n  attribution?: string,\n  bounds?: LatLngBounds,\n  opacity?: number,\n  url: string | HTMLImageElement,\n  zIndex?: number,\n} & MapLayerProps\n\nclass ImageOverlay extends MapLayer<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const el = new LeafletImageOverlay(\n      props.url,\n      props.bounds,\n      this.getOptions(props),\n    )\n    this.contextValue = { ...props.leaflet, popupContainer: el }\n    return el\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.url !== fromProps.url) {\n      this.leafletElement.setUrl(toProps.url)\n    }\n    if (toProps.bounds !== fromProps.bounds) {\n      this.leafletElement.setBounds(latLngBounds(toProps.bounds))\n    }\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity)\n    }\n    if (toProps.zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(toProps.zIndex)\n    }\n  }\n}\n\nexport default withLeaflet<Props, ImageOverlay>(ImageOverlay)\n"]},"metadata":{},"sourceType":"module"}