{"ast":null,"code":"var _jsxFileName = \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/MapLayer.js\";\nimport React, { Fragment } from 'react';\nimport { LeafletProvider } from './context';\nimport MapComponent from './MapComponent';\nexport default class MapLayer extends MapComponent {\n  constructor(props) {\n    super(props);\n    this.leafletElement = this.createLeafletElement(props);\n  }\n\n  get layerContainer() {\n    return this.props.leaflet.layerContainer || this.props.leaflet.map;\n  }\n\n  createLeafletElement(_props) {\n    throw new Error('createLeafletElement() must be implemented');\n  }\n\n  updateLeafletElement(_fromProps, _toProps) {}\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.layerContainer.addLayer(this.leafletElement);\n  }\n\n  componentDidUpdate(prevProps) {\n    super.componentDidUpdate(prevProps);\n\n    if (this.props.attribution !== prevProps.attribution) {\n      const map = this.props.leaflet.map;\n\n      if (map != null && map.attributionControl != null) {\n        map.attributionControl.removeAttribution(prevProps.attribution);\n        map.attributionControl.addAttribution(this.props.attribution);\n      }\n    }\n\n    this.updateLeafletElement(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n    this.layerContainer.removeLayer(this.leafletElement);\n  }\n\n  render() {\n    const children = this.props.children;\n\n    if (children == null) {\n      return null;\n    }\n\n    return this.contextValue == null ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, children) : React.createElement(LeafletProvider, {\n      value: this.contextValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, children);\n  }\n\n}","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/MapLayer.js"],"names":["React","Fragment","LeafletProvider","MapComponent","MapLayer","constructor","props","leafletElement","createLeafletElement","layerContainer","leaflet","map","_props","Error","updateLeafletElement","_fromProps","_toProps","componentDidMount","addLayer","componentDidUpdate","prevProps","attribution","attributionControl","removeAttribution","addAttribution","componentWillUnmount","removeLayer","render","children","contextValue"],"mappings":";AAGA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAGA,eAAe,MAAMC,QAAN,SAGLD,YAHK,CAG+B;AAI5CE,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AACA,SAAKC,cAAL,GAAsB,KAAKC,oBAAL,CAA0BF,KAA1B,CAAtB;AACD;;AAED,MAAIG,cAAJ,GAA4B;AAC1B,WAAO,KAAKH,KAAL,CAAWI,OAAX,CAAmBD,cAAnB,IAAqC,KAAKH,KAAL,CAAWI,OAAX,CAAmBC,GAA/D;AACD;;AAEDH,EAAAA,oBAAoB,CAACI,MAAD,EAAgC;AAClD,UAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAEDC,EAAAA,oBAAoB,CAACC,UAAD,EAAoBC,QAApB,EAAqC,CAAE;;AAE3DC,EAAAA,iBAAiB,GAAG;AAClB,UAAMA,iBAAN;AACA,SAAKR,cAAL,CAAoBS,QAApB,CAA6B,KAAKX,cAAlC;AACD;;AAEDY,EAAAA,kBAAkB,CAACC,SAAD,EAAmB;AACnC,UAAMD,kBAAN,CAAyBC,SAAzB;;AAEA,QAAI,KAAKd,KAAL,CAAWe,WAAX,KAA2BD,SAAS,CAACC,WAAzC,EAAsD;AAAA,YAC5CV,GAD4C,GACpC,KAAKL,KAAL,CAAWI,OADyB,CAC5CC,GAD4C;;AAEpD,UAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACW,kBAAJ,IAA0B,IAA7C,EAAmD;AACjDX,QAAAA,GAAG,CAACW,kBAAJ,CAAuBC,iBAAvB,CAAyCH,SAAS,CAACC,WAAnD;AACAV,QAAAA,GAAG,CAACW,kBAAJ,CAAuBE,cAAvB,CAAsC,KAAKlB,KAAL,CAAWe,WAAjD;AACD;AACF;;AAED,SAAKP,oBAAL,CAA0BM,SAA1B,EAAqC,KAAKd,KAA1C;AACD;;AAEDmB,EAAAA,oBAAoB,GAAG;AACrB,UAAMA,oBAAN;AACA,SAAKhB,cAAL,CAAoBiB,WAApB,CAAgC,KAAKnB,cAArC;AACD;;AAEDoB,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKtB,KADnB,CACCsB,QADD;;AAEP,QAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,aAAO,IAAP;AACD;;AACD,WAAO,KAAKC,YAAL,IAAqB,IAArB,GACL,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWD,QAAX,CADK,GAGL,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE,KAAKC,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4CD,QAA5C,CAHF;AAKD;;AArD2C","sourcesContent":["// @flow\n\nimport type { Layer } from 'leaflet'\nimport React, { Fragment } from 'react'\n\nimport { LeafletProvider } from './context'\nimport MapComponent from './MapComponent'\nimport type { LeafletContext, MapLayerProps } from './types'\n\nexport default class MapLayer<\n  LeafletElement: Layer,\n  Props: MapLayerProps,\n> extends MapComponent<LeafletElement, Props> {\n  contextValue: ?LeafletContext\n  leafletElement: LeafletElement\n\n  constructor(props: Props) {\n    super(props)\n    this.leafletElement = this.createLeafletElement(props)\n  }\n\n  get layerContainer(): Layer {\n    return this.props.leaflet.layerContainer || this.props.leaflet.map\n  }\n\n  createLeafletElement(_props: Props): LeafletElement {\n    throw new Error('createLeafletElement() must be implemented')\n  }\n\n  updateLeafletElement(_fromProps: Props, _toProps: Props) {}\n\n  componentDidMount() {\n    super.componentDidMount()\n    this.layerContainer.addLayer(this.leafletElement)\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    super.componentDidUpdate(prevProps)\n\n    if (this.props.attribution !== prevProps.attribution) {\n      const { map } = this.props.leaflet\n      if (map != null && map.attributionControl != null) {\n        map.attributionControl.removeAttribution(prevProps.attribution)\n        map.attributionControl.addAttribution(this.props.attribution)\n      }\n    }\n\n    this.updateLeafletElement(prevProps, this.props)\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount()\n    this.layerContainer.removeLayer(this.leafletElement)\n  }\n\n  render() {\n    const { children } = this.props\n    if (children == null) {\n      return null\n    }\n    return this.contextValue == null ? (\n      <Fragment>{children}</Fragment>\n    ) : (\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}