{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { withLeaflet } from './context';\nimport DivOverlay from './DivOverlay';\n\nclass Popup extends DivOverlay {\n  constructor(...args) {\n    super(...args);\n\n    this.onPopupOpen = ({\n      popup\n    }) => {\n      if (popup === this.leafletElement) {\n        this.onOpen();\n      }\n    };\n\n    this.onPopupClose = ({\n      popup\n    }) => {\n      if (popup === this.leafletElement) {\n        this.onClose();\n      }\n    };\n\n    this.onRender = () => {\n      if (this.props.autoPan !== false && this.leafletElement.isOpen()) {\n        if (this.leafletElement._map && this.leafletElement._map._panAnim) {\n          this.leafletElement._map._panAnim = undefined;\n        }\n\n        this.leafletElement._adjustPan();\n      }\n    };\n  }\n\n  getOptions(props) {\n    return _objectSpread({}, super.getOptions(props), {\n      autoPan: false\n    });\n  }\n\n  createLeafletElement(props) {\n    const options = this.getOptions(props);\n    options.autoPan = props.autoPan !== false;\n    return new LeafletPopup(options, props.leaflet.popupContainer);\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position);\n    }\n  }\n\n  componentDidMount() {\n    const position = this.props.position;\n    const _this$props$leaflet = this.props.leaflet,\n          map = _this$props$leaflet.map,\n          popupContainer = _this$props$leaflet.popupContainer;\n    const el = this.leafletElement;\n\n    if (map != null) {\n      map.on({\n        popupopen: this.onPopupOpen,\n        popupclose: this.onPopupClose\n      });\n    }\n\n    if (popupContainer) {\n      // Attach to container component\n      popupContainer.bindPopup(el);\n    } else {\n      // Attach to a Map\n      if (position) {\n        el.setLatLng(position);\n      }\n\n      el.openOn(map);\n    }\n  }\n\n  componentWillUnmount() {\n    const map = this.props.leaflet.map;\n\n    if (map != null) {\n      map.off({\n        popupopen: this.onPopupOpen,\n        popupclose: this.onPopupClose\n      });\n      map.removeLayer(this.leafletElement);\n    }\n\n    super.componentWillUnmount();\n  }\n\n}\n\nPopup.defaultProps = {\n  pane: 'popupPane'\n};\nexport default withLeaflet(Popup);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Popup.js"],"names":["Popup","LeafletPopup","withLeaflet","DivOverlay","onPopupOpen","popup","leafletElement","onOpen","onPopupClose","onClose","onRender","props","autoPan","isOpen","_map","_panAnim","undefined","_adjustPan","getOptions","createLeafletElement","options","leaflet","popupContainer","updateLeafletElement","fromProps","toProps","position","setLatLng","componentDidMount","map","el","on","popupopen","popupclose","bindPopup","openOn","componentWillUnmount","off","removeLayer","defaultProps","pane"],"mappings":"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","sourcesContent":["// @flow\n\nimport { Popup as LeafletPopup } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport DivOverlay from './DivOverlay'\nimport type { LatLng, DivOverlayProps } from './types'\n\ntype LeafletElement = LeafletPopup\ntype Props = {\n  autoPan?: boolean,\n  position?: LatLng,\n} & DivOverlayProps\n\nclass Popup extends DivOverlay<LeafletElement, Props> {\n  static defaultProps = {\n    pane: 'popupPane',\n  }\n\n  getOptions(props: Props): Props {\n    return {\n      ...super.getOptions(props),\n      autoPan: false,\n    }\n  }\n\n  createLeafletElement(props: Props): LeafletElement {\n    const options = this.getOptions(props)\n    options.autoPan = props.autoPan !== false\n    return new LeafletPopup(options, props.leaflet.popupContainer)\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position)\n    }\n  }\n\n  componentDidMount() {\n    const { position } = this.props\n    const { map, popupContainer } = this.props.leaflet\n    const el = this.leafletElement\n\n    if (map != null) {\n      map.on({\n        popupopen: this.onPopupOpen,\n        popupclose: this.onPopupClose,\n      })\n    }\n\n    if (popupContainer) {\n      // Attach to container component\n      popupContainer.bindPopup(el)\n    } else {\n      // Attach to a Map\n      if (position) {\n        el.setLatLng(position)\n      }\n      el.openOn(map)\n    }\n  }\n\n  componentWillUnmount() {\n    const { map } = this.props.leaflet\n\n    if (map != null) {\n      map.off({\n        popupopen: this.onPopupOpen,\n        popupclose: this.onPopupClose,\n      })\n      map.removeLayer(this.leafletElement)\n    }\n\n    super.componentWillUnmount()\n  }\n\n  onPopupOpen = ({ popup }: { popup: LeafletElement }) => {\n    if (popup === this.leafletElement) {\n      this.onOpen()\n    }\n  }\n\n  onPopupClose = ({ popup }: { popup: LeafletElement }) => {\n    if (popup === this.leafletElement) {\n      this.onClose()\n    }\n  }\n\n  onRender = () => {\n    if (this.props.autoPan !== false && this.leafletElement.isOpen()) {\n      if (this.leafletElement._map && this.leafletElement._map._panAnim) {\n        this.leafletElement._map._panAnim = undefined\n      }\n      this.leafletElement._adjustPan()\n    }\n  }\n}\n\nexport default withLeaflet<Props, Popup>(Popup)\n"]},"metadata":{},"sourceType":"module"}