{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CircleMarker as LeafletCircleMarker } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nclass CircleMarker extends Path {\n  createLeafletElement(props) {\n    const el = new LeafletCircleMarker(props.center, this.getOptions(props));\n    this.contextValue = _objectSpread({}, props.leaflet, {\n      popupContainer: el\n    });\n    return el;\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (toProps.center !== fromProps.center) {\n      this.leafletElement.setLatLng(toProps.center);\n    }\n\n    if (toProps.radius !== fromProps.radius) {\n      this.leafletElement.setRadius(toProps.radius);\n    }\n  }\n\n}\n\nexport default withLeaflet(CircleMarker);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/CircleMarker.js"],"names":["CircleMarker","LeafletCircleMarker","withLeaflet","Path","createLeafletElement","props","el","center","getOptions","contextValue","leaflet","popupContainer","updateLeafletElement","fromProps","toProps","leafletElement","setLatLng","radius","setRadius"],"mappings":";;;;;;AAEA,SAASA,YAAY,IAAIC,mBAAzB,QAAoD,SAApD;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AASA,MAAMH,YAAN,SAA2BG,IAA3B,CAAuD;AACrDC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,UAAMC,EAAE,GAAG,IAAIL,mBAAJ,CAAwBI,KAAK,CAACE,MAA9B,EAAsC,KAAKC,UAAL,CAAgBH,KAAhB,CAAtC,CAAX;AACA,SAAKI,YAAL,qBAAyBJ,KAAK,CAACK,OAA/B;AAAwCC,MAAAA,cAAc,EAAEL;AAAxD;AACA,WAAOA,EAAP;AACD;;AAEDM,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AACrD,QAAIA,OAAO,CAACP,MAAR,KAAmBM,SAAS,CAACN,MAAjC,EAAyC;AACvC,WAAKQ,cAAL,CAAoBC,SAApB,CAA8BF,OAAO,CAACP,MAAtC;AACD;;AACD,QAAIO,OAAO,CAACG,MAAR,KAAmBJ,SAAS,CAACI,MAAjC,EAAyC;AACvC,WAAKF,cAAL,CAAoBG,SAApB,CAA8BJ,OAAO,CAACG,MAAtC;AACD;AACF;;AAdoD;;AAiBvD,eAAef,WAAW,CAAsBF,YAAtB,CAA1B","sourcesContent":["// @flow\n\nimport { CircleMarker as LeafletCircleMarker } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { LatLng, PathProps } from './types'\n\ntype LeafletElement = LeafletCircleMarker\ntype Props = {\n  center: LatLng,\n  radius: number,\n} & PathProps\n\nclass CircleMarker extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const el = new LeafletCircleMarker(props.center, this.getOptions(props))\n    this.contextValue = { ...props.leaflet, popupContainer: el }\n    return el\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.center !== fromProps.center) {\n      this.leafletElement.setLatLng(toProps.center)\n    }\n    if (toProps.radius !== fromProps.radius) {\n      this.leafletElement.setRadius(toProps.radius)\n    }\n  }\n}\n\nexport default withLeaflet<Props, CircleMarker>(CircleMarker)\n"]},"metadata":{},"sourceType":"module"}