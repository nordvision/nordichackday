{"ast":null,"code":"import { GeoJSON as LeafletGeoJSON } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nclass GeoJSON extends Path {\n  createLeafletElement(props) {\n    return new LeafletGeoJSON(props.data, this.getOptions(props));\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (typeof toProps.style === 'function') {\n      this.leafletElement.setStyle(toProps.style);\n    } else {\n      this.setStyleIfChanged(fromProps, toProps);\n    }\n  }\n\n}\n\nexport default withLeaflet(GeoJSON);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/GeoJSON.js"],"names":["GeoJSON","LeafletGeoJSON","withLeaflet","Path","createLeafletElement","props","data","getOptions","updateLeafletElement","fromProps","toProps","style","leafletElement","setStyle","setStyleIfChanged"],"mappings":"AAEA,SAASA,OAAO,IAAIC,cAApB,QAAmE,SAAnE;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAgBA,MAAMH,OAAN,SAAsBG,IAAtB,CAAkD;AAChDC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,WAAO,IAAIJ,cAAJ,CAAmBI,KAAK,CAACC,IAAzB,EAA+B,KAAKC,UAAL,CAAgBF,KAAhB,CAA/B,CAAP;AACD;;AAEDG,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AACrD,QAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,WAAKC,cAAL,CAAoBC,QAApB,CAA6BH,OAAO,CAACC,KAArC;AACD,KAFD,MAEO;AACL,WAAKG,iBAAL,CAAuBL,SAAvB,EAAkCC,OAAlC;AACD;AACF;;AAX+C;;AAclD,eAAeR,WAAW,CAAiBF,OAAjB,CAA1B","sourcesContent":["// @flow\n\nimport { GeoJSON as LeafletGeoJSON, type LatLng, type Layer } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { PathProps } from './types'\n\ntype LeafletElement = LeafletGeoJSON\n\ntype GeoJSONdata = Object | Array<any>\n\ntype Props = {\n  data: GeoJSONdata,\n  pointToLayer?: (point: GeoJSONdata, latlng: LatLng) => Layer,\n  style?: (feature: GeoJSONdata) => Object,\n  onEachFeature?: (feature: GeoJSONdata, layer: Layer) => void,\n  filter?: (feature: GeoJSONdata) => boolean,\n  coordsToLatLng?: (coords: GeoJSONdata) => LatLng,\n} & PathProps\n\nclass GeoJSON extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletGeoJSON(props.data, this.getOptions(props))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (typeof toProps.style === 'function') {\n      this.leafletElement.setStyle(toProps.style)\n    } else {\n      this.setStyleIfChanged(fromProps, toProps)\n    }\n  }\n}\n\nexport default withLeaflet<Props, GeoJSON>(GeoJSON)\n"]},"metadata":{},"sourceType":"module"}