{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport isEqual from 'fast-deep-equal';\nimport MapLayer from './MapLayer';\nimport pick from './utils/pick';\nconst OPTIONS = ['stroke', 'color', 'weight', 'opacity', 'lineCap', 'lineJoin', 'dashArray', 'dashOffset', 'fill', 'fillColor', 'fillOpacity', 'fillRule', 'bubblingMouseEvents', 'renderer', 'className', // Interactive Layer\n'interactive', // Layer\n'pane', 'attribution'];\nexport default class Path extends MapLayer {\n  constructor(props) {\n    super(props);\n\n    if (this.contextValue == null) {\n      this.contextValue = _objectSpread({}, props.leaflet, {\n        popupContainer: this.leafletElement\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    super.componentDidUpdate(prevProps);\n    this.setStyleIfChanged(prevProps, this.props);\n  }\n\n  getPathOptions(props) {\n    return pick(props, OPTIONS);\n  }\n\n  setStyle(options = {}) {\n    this.leafletElement.setStyle(options);\n  }\n\n  setStyleIfChanged(fromProps, toProps) {\n    const nextStyle = this.getPathOptions(toProps);\n\n    if (!isEqual(nextStyle, this.getPathOptions(fromProps))) {\n      this.setStyle(nextStyle);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Path.js"],"names":["isEqual","MapLayer","pick","OPTIONS","Path","constructor","props","contextValue","leaflet","popupContainer","leafletElement","componentDidUpdate","prevProps","setStyleIfChanged","getPathOptions","setStyle","options","fromProps","toProps","nextStyle"],"mappings":";;;;;;AAGA,OAAOA,OAAP,MAAoB,iBAApB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,MAAMC,OAAO,GAAG,CACd,QADc,EAEd,OAFc,EAGd,QAHc,EAId,SAJc,EAKd,SALc,EAMd,UANc,EAOd,WAPc,EAQd,YARc,EASd,MATc,EAUd,WAVc,EAWd,aAXc,EAYd,UAZc,EAad,qBAbc,EAcd,UAdc,EAed,WAfc,EAgBd;AACA,aAjBc,EAkBd;AACA,MAnBc,EAoBd,aApBc,CAAhB;AAuBA,eAAe,MAAMC,IAAN,SAGLH,QAHK,CAG2B;AACxCI,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;;AACA,QAAI,KAAKC,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,WAAKA,YAAL,qBACKD,KAAK,CAACE,OADX;AAEEC,QAAAA,cAAc,EAAE,KAAKC;AAFvB;AAID;AACF;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAmB;AACnC,UAAMD,kBAAN,CAAyBC,SAAzB;AACA,SAAKC,iBAAL,CAAuBD,SAAvB,EAAkC,KAAKN,KAAvC;AACD;;AAEDQ,EAAAA,cAAc,CAACR,KAAD,EAA4B;AACxC,WAAOJ,IAAI,CAACI,KAAD,EAAQH,OAAR,CAAX;AACD;;AAEDY,EAAAA,QAAQ,CAACC,OAAoB,GAAG,EAAxB,EAA4B;AAClC,SAAKN,cAAL,CAAoBK,QAApB,CAA6BC,OAA7B;AACD;;AAEDH,EAAAA,iBAAiB,CAACI,SAAD,EAAmBC,OAAnB,EAAmC;AAClD,UAAMC,SAAS,GAAG,KAAKL,cAAL,CAAoBI,OAApB,CAAlB;;AACA,QAAI,CAAClB,OAAO,CAACmB,SAAD,EAAY,KAAKL,cAAL,CAAoBG,SAApB,CAAZ,CAAZ,EAAyD;AACvD,WAAKF,QAAL,CAAcI,SAAd;AACD;AACF;;AA7BuC","sourcesContent":["// @flow\n\nimport type { Path as PathType } from 'leaflet'\nimport isEqual from 'fast-deep-equal'\n\nimport MapLayer from './MapLayer'\nimport type { PathOptions, PathProps } from './types'\nimport pick from './utils/pick'\n\nconst OPTIONS = [\n  'stroke',\n  'color',\n  'weight',\n  'opacity',\n  'lineCap',\n  'lineJoin',\n  'dashArray',\n  'dashOffset',\n  'fill',\n  'fillColor',\n  'fillOpacity',\n  'fillRule',\n  'bubblingMouseEvents',\n  'renderer',\n  'className',\n  // Interactive Layer\n  'interactive',\n  // Layer\n  'pane',\n  'attribution',\n]\n\nexport default class Path<\n  LeafletElement: PathType,\n  Props: PathProps,\n> extends MapLayer<LeafletElement, Props> {\n  constructor(props: Props) {\n    super(props)\n    if (this.contextValue == null) {\n      this.contextValue = {\n        ...props.leaflet,\n        popupContainer: this.leafletElement,\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    super.componentDidUpdate(prevProps)\n    this.setStyleIfChanged(prevProps, this.props)\n  }\n\n  getPathOptions(props: Props): PathOptions {\n    return pick(props, OPTIONS)\n  }\n\n  setStyle(options: PathOptions = {}) {\n    this.leafletElement.setStyle(options)\n  }\n\n  setStyleIfChanged(fromProps: Props, toProps: Props) {\n    const nextStyle = this.getPathOptions(toProps)\n    if (!isEqual(nextStyle, this.getPathOptions(fromProps))) {\n      this.setStyle(nextStyle)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}