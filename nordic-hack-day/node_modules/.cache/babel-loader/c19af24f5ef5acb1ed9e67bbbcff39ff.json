{"ast":null,"code":"import { createPortal } from 'react-dom';\nimport MapComponent from './MapComponent';\nimport updateClassName from './utils/updateClassName';\nexport default class DivOverlay extends MapComponent {\n  constructor(props) {\n    super(props);\n\n    this.onClose = () => {\n      if (this.props.onClose) {\n        this.props.onClose();\n      }\n    };\n\n    this.onOpen = () => {\n      this.forceUpdate(); // Re-render now that leafletElement is created\n\n      if (this.props.onOpen) {\n        this.props.onOpen();\n      }\n    };\n\n    this.leafletElement = this.createLeafletElement(props);\n  }\n\n  createLeafletElement(_props) {\n    throw new Error('createLeafletElement() must be implemented');\n  }\n\n  updateLeafletElement(_prevProps, _props) {}\n\n  componentDidUpdate(prevProps) {\n    updateClassName(this.leafletElement._container, prevProps.className, this.props.className);\n    this.updateLeafletElement(prevProps, this.props);\n\n    if (this.leafletElement.isOpen()) {\n      this.leafletElement.update();\n      this.onRender();\n    }\n  }\n\n  onRender() {}\n\n  render() {\n    if (this.leafletElement._contentNode) {\n      return createPortal(this.props.children, this.leafletElement._contentNode);\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/DivOverlay.js"],"names":["createPortal","MapComponent","updateClassName","DivOverlay","constructor","props","onClose","onOpen","forceUpdate","leafletElement","createLeafletElement","_props","Error","updateLeafletElement","_prevProps","componentDidUpdate","prevProps","_container","className","isOpen","update","onRender","render","_contentNode","children"],"mappings":"AAEA,SAASA,YAAT,QAA6B,WAA7B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAUA,eAAe,MAAMC,UAAN,SAGLF,YAHK,CAGiD;AAC9DG,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;;AADwB,SA0B1BC,OA1B0B,GA0BhB,MAAM;AACd,UAAI,KAAKD,KAAL,CAAWC,OAAf,EAAwB;AACtB,aAAKD,KAAL,CAAWC,OAAX;AACD;AACF,KA9ByB;;AAAA,SAgC1BC,MAhC0B,GAgCjB,MAAM;AACb,WAAKC,WAAL,GADa,CACM;;AACnB,UAAI,KAAKH,KAAL,CAAWE,MAAf,EAAuB;AACrB,aAAKF,KAAL,CAAWE,MAAX;AACD;AACF,KArCyB;;AAExB,SAAKE,cAAL,GAAsB,KAAKC,oBAAL,CAA0BL,KAA1B,CAAtB;AACD;;AAEDK,EAAAA,oBAAoB,CAACC,MAAD,EAAgB;AAClC,UAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAEDC,EAAAA,oBAAoB,CAACC,UAAD,EAAoBH,MAApB,EAAmC,CAAE;;AAEzDI,EAAAA,kBAAkB,CAACC,SAAD,EAAmB;AACnCd,IAAAA,eAAe,CACb,KAAKO,cAAL,CAAoBQ,UADP,EAEbD,SAAS,CAACE,SAFG,EAGb,KAAKb,KAAL,CAAWa,SAHE,CAAf;AAMA,SAAKL,oBAAL,CAA0BG,SAA1B,EAAqC,KAAKX,KAA1C;;AAEA,QAAI,KAAKI,cAAL,CAAoBU,MAApB,EAAJ,EAAkC;AAChC,WAAKV,cAAL,CAAoBW,MAApB;AACA,WAAKC,QAAL;AACD;AACF;;AAeDA,EAAAA,QAAQ,GAAG,CAAE;;AAEbC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKb,cAAL,CAAoBc,YAAxB,EAAsC;AACpC,aAAOvB,YAAY,CAAC,KAAKK,KAAL,CAAWmB,QAAZ,EAAsB,KAAKf,cAAL,CAAoBc,YAA1C,CAAnB;AACD;;AACD,WAAO,IAAP;AACD;;AA/C6D","sourcesContent":["// @flow\n\nimport { createPortal } from 'react-dom'\n\nimport MapComponent from './MapComponent'\nimport updateClassName from './utils/updateClassName'\nimport type { DivOverlayProps } from './types'\n\ntype DivOverlayTypes = {\n  _container: HTMLDivElement,\n  _contentNode: HTMLDivElement,\n  isOpen: () => boolean,\n  update: () => void,\n}\n\nexport default class DivOverlay<\n  LeafletElement,\n  Props: DivOverlayProps,\n> extends MapComponent<LeafletElement & DivOverlayTypes, Props> {\n  constructor(props: Props) {\n    super(props)\n    this.leafletElement = this.createLeafletElement(props)\n  }\n\n  createLeafletElement(_props: Props) {\n    throw new Error('createLeafletElement() must be implemented')\n  }\n\n  updateLeafletElement(_prevProps: Props, _props: Props) {}\n\n  componentDidUpdate(prevProps: Props) {\n    updateClassName(\n      this.leafletElement._container,\n      prevProps.className,\n      this.props.className,\n    )\n\n    this.updateLeafletElement(prevProps, this.props)\n\n    if (this.leafletElement.isOpen()) {\n      this.leafletElement.update()\n      this.onRender()\n    }\n  }\n\n  onClose = () => {\n    if (this.props.onClose) {\n      this.props.onClose()\n    }\n  }\n\n  onOpen = () => {\n    this.forceUpdate() // Re-render now that leafletElement is created\n    if (this.props.onOpen) {\n      this.props.onOpen()\n    }\n  }\n\n  onRender() {}\n\n  render() {\n    if (this.leafletElement._contentNode) {\n      return createPortal(this.props.children, this.leafletElement._contentNode)\n    }\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}