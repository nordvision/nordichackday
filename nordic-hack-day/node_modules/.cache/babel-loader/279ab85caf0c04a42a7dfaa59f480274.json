{"ast":null,"code":"import _objectWithoutProperties from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { Circle as LeafletCircle } from 'leaflet';\nimport { withLeaflet } from './context';\nimport Path from './Path';\n\nclass Circle extends Path {\n  createLeafletElement(props) {\n    const center = props.center,\n          radius = props.radius,\n          options = _objectWithoutProperties(props, [\"center\", \"radius\"]);\n\n    return new LeafletCircle(center, radius, this.getOptions(options));\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    if (toProps.center !== fromProps.center) {\n      this.leafletElement.setLatLng(toProps.center);\n    }\n\n    if (toProps.radius !== fromProps.radius) {\n      this.leafletElement.setRadius(toProps.radius);\n    }\n  }\n\n}\n\nexport default withLeaflet(Circle);","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/Circle.js"],"names":["Circle","LeafletCircle","withLeaflet","Path","createLeafletElement","props","center","radius","options","getOptions","updateLeafletElement","fromProps","toProps","leafletElement","setLatLng","setRadius"],"mappings":";AAEA,SAASA,MAAM,IAAIC,aAAnB,QAAwC,SAAxC;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAWA,MAAMH,MAAN,SAAqBG,IAArB,CAAiD;AAC/CC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AAAA,UACzCC,MADyC,GACVD,KADU,CACzCC,MADyC;AAAA,UACjCC,MADiC,GACVF,KADU,CACjCE,MADiC;AAAA,UACtBC,OADsB,4BACVH,KADU;;AAEjD,WAAO,IAAIJ,aAAJ,CAAkBK,MAAlB,EAA0BC,MAA1B,EAAkC,KAAKE,UAAL,CAAgBD,OAAhB,CAAlC,CAAP;AACD;;AAEDE,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AACrD,QAAIA,OAAO,CAACN,MAAR,KAAmBK,SAAS,CAACL,MAAjC,EAAyC;AACvC,WAAKO,cAAL,CAAoBC,SAApB,CAA8BF,OAAO,CAACN,MAAtC;AACD;;AACD,QAAIM,OAAO,CAACL,MAAR,KAAmBI,SAAS,CAACJ,MAAjC,EAAyC;AACvC,WAAKM,cAAL,CAAoBE,SAApB,CAA8BH,OAAO,CAACL,MAAtC;AACD;AACF;;AAb8C;;AAgBjD,eAAeL,WAAW,CAAgBF,MAAhB,CAA1B","sourcesContent":["// @flow\n\nimport { Circle as LeafletCircle } from 'leaflet'\n\nimport { withLeaflet } from './context'\nimport Path from './Path'\nimport type { LatLng, MapLayerProps, PathOptions } from './types'\n\ntype LeafletElement = LeafletCircle\ntype Props = {\n  center: LatLng,\n  radius: number,\n} & MapLayerProps &\n  PathOptions &\n  Object\n\nclass Circle extends Path<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    const { center, radius, ...options } = props\n    return new LeafletCircle(center, radius, this.getOptions(options))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    if (toProps.center !== fromProps.center) {\n      this.leafletElement.setLatLng(toProps.center)\n    }\n    if (toProps.radius !== fromProps.radius) {\n      this.leafletElement.setRadius(toProps.radius)\n    }\n  }\n}\n\nexport default withLeaflet<Props, Circle>(Circle)\n"]},"metadata":{},"sourceType":"module"}