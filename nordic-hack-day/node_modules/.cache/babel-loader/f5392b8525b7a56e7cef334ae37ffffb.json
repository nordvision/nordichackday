{"ast":null,"code":"import _defineProperty from \"/Users/n642407/Repos/NordicHackDay/nordic-hack-day/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GridLayer as LeafletGridLayer } from 'leaflet';\nimport MapLayer from './MapLayer';\nexport default class GridLayer extends MapLayer {\n  createLeafletElement(props) {\n    return new LeafletGridLayer(this.getOptions(props));\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    const opacity = toProps.opacity,\n          zIndex = toProps.zIndex;\n\n    if (opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(opacity);\n    }\n\n    if (zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(zIndex);\n    }\n  }\n\n  getOptions(props) {\n    const options = super.getOptions(props);\n    return props.leaflet.map == null ? options : // $FlowFixMe: object spread type\n    _objectSpread({\n      maxZoom: props.leaflet.map.options.maxZoom,\n      minZoom: props.leaflet.map.options.minZoom\n    }, options);\n  }\n\n  render() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/Users/n642407/Repos/NordicHackDay/nordic-hack-day/src/Extra/GridLayer.js"],"names":["GridLayer","LeafletGridLayer","MapLayer","createLeafletElement","props","getOptions","updateLeafletElement","fromProps","toProps","opacity","zIndex","leafletElement","setOpacity","setZIndex","options","leaflet","map","maxZoom","minZoom","render"],"mappings":";;;;;;AAEA,SAASA,SAAS,IAAIC,gBAAtB,QAA8C,SAA9C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAGA,eAAe,MAAMF,SAAN,SAGLE,QAHK,CAG2B;AACxCC,EAAAA,oBAAoB,CAACC,KAAD,EAA+B;AACjD,WAAO,IAAIH,gBAAJ,CAAqB,KAAKI,UAAL,CAAgBD,KAAhB,CAArB,CAAP;AACD;;AAEDE,EAAAA,oBAAoB,CAACC,SAAD,EAAmBC,OAAnB,EAAmC;AAAA,UAC7CC,OAD6C,GACzBD,OADyB,CAC7CC,OAD6C;AAAA,UACpCC,MADoC,GACzBF,OADyB,CACpCE,MADoC;;AAErD,QAAID,OAAO,KAAKF,SAAS,CAACE,OAA1B,EAAmC;AACjC,WAAKE,cAAL,CAAoBC,UAApB,CAA+BH,OAA/B;AACD;;AACD,QAAIC,MAAM,KAAKH,SAAS,CAACG,MAAzB,EAAiC;AAC/B,WAAKC,cAAL,CAAoBE,SAApB,CAA8BH,MAA9B;AACD;AACF;;AAEDL,EAAAA,UAAU,CAACD,KAAD,EAAsB;AAC9B,UAAMU,OAAO,GAAG,MAAMT,UAAN,CAAiBD,KAAjB,CAAhB;AACA,WAAOA,KAAK,CAACW,OAAN,CAAcC,GAAd,IAAqB,IAArB,GACHF,OADG,GAEH;AAFG;AAIDG,MAAAA,OAAO,EAAEb,KAAK,CAACW,OAAN,CAAcC,GAAd,CAAkBF,OAAlB,CAA0BG,OAJlC;AAKDC,MAAAA,OAAO,EAAEd,KAAK,CAACW,OAAN,CAAcC,GAAd,CAAkBF,OAAlB,CAA0BI;AALlC,OAMEJ,OANF,CAAP;AAQD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA7BuC","sourcesContent":["// @flow\n\nimport { GridLayer as LeafletGridLayer } from 'leaflet'\n\nimport MapLayer from './MapLayer'\nimport type { GridLayerProps } from './types'\n\nexport default class GridLayer<\n  LeafletElement: LeafletGridLayer,\n  Props: GridLayerProps,\n> extends MapLayer<LeafletElement, Props> {\n  createLeafletElement(props: Props): LeafletElement {\n    return new LeafletGridLayer(this.getOptions(props))\n  }\n\n  updateLeafletElement(fromProps: Props, toProps: Props) {\n    const { opacity, zIndex } = toProps\n    if (opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(opacity)\n    }\n    if (zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(zIndex)\n    }\n  }\n\n  getOptions(props: Props): Props {\n    const options = super.getOptions(props)\n    return props.leaflet.map == null\n      ? options\n      : // $FlowFixMe: object spread type\n        {\n          maxZoom: props.leaflet.map.options.maxZoom,\n          minZoom: props.leaflet.map.options.minZoom,\n          ...options,\n        }\n  }\n\n  render() {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}